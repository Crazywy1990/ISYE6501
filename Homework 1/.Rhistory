utils:::menuInstallPkgs()
save.image("C:\\Users\\Bryson\\Documents\\Bryson\\ISYE6501\\Homework 1\\Homework1 - BCC")
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
mydata = read.csv("credit_card_data.csv",header=TRUE)
mydata = read.csv("credit_card_data.csv",header=TRUE)
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
mydata = read.csv("credit_card_data.csv",header=TRUE)
currentdir
curdir
mydata = read.csv("credit_card_data.csv",header=TRUE)
mydata = read.csv("C:\Users\Bryson\Documents\Bryson\ISYE6501\Homework1\credit_card_data.csv",header=TRUE)
mydata = read.csv("credit_card_data.csv",header=TRUE)
dir()
mydata = read.csv("credit_card_data.csv",header=TRUE)
mydata
mydata_headers = read.csv("credit_card_data-headers.csv",header=TRUE)
mydata_headers
mydata = read.csv("credit_card_data.csv",header=TRUE)
mydata = read.csv("credit_card_data.csv",header=TRUE)
mydata
mydata = read.csv("credit_card_data-headers.csv",header=TRUE)
mydata
help (ksvm)
clear
clc
mydata = read.csv("credit_card_data.csv",header=TRUE)3
mydata = read.csv("credit_card_data.csv",header=TRUE)3
mydata = read.csv("credit_card_data.csv",header=TRUE)
ksvm(a, mydata, scaled=True)
ksvm(x, mydata, scaled=True)
ksvm(mydata[:,10], mydata[,11], scaled=True)
ksvm(mydata[:10], mydata[,11], scaled=True)
ksvm(mydata[0:9], mydata[,11], scaled=True)
ksvm(mydata[0:10], mydata[,11], scaled=True)
ksvm(mydata[1:10], mydata[,11], scaled=True)
model = ksvm(mydata[1:10], mydata[,11], scaled=True)
model = ksvm(mydata[1:10], mydata[,11],scaled=Truetype=”C-svc”,kernel=”vanilladot”,C=100,scaled=TRUE)
model = ksvm(mydata[1:10], mydata[,11],type=”C-svc”,kernel=”vanilladot”,C=100,scaled=TRUE)
model = ksvm(mydata[1:10], mydata[,11],type=C-svc,kernel=vanilladot,C=100,scaled=TRUE)
model = ksvm(mydata[1:10], mydata[,11],type=C-svc,kernel=vanilladot,C=100,scaled=TRUE)
model = ksvm(mydata[1:10], mydata[,11],type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
install.packages("kknn")
install.packages("kernlab")
#load package to use
rm(list=ls())
library(kknn)
library(kernlab)
mydata_headers = read.csv("credit_card_data-headers.csv",header=TRUE)
mydata_headers = read.csv("credit_card_data-headers.csv",header=TRUE)
#Bryson Cook
#ISYE6501, Spring 2018
#Homework 1
install.packages("kknn")
install.packages("kernlab")
library(kknn)
library(kernlab)
mydata = read.csv("credit_card_data.csv",header=TRUE)
mydata_headers = read.csv("credit_card_data-headers.csv",header=TRUE)
model = ksvm(mydata[1:10], mydata[,11],type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
mydata
mydata = read.csv("credit_card_data.csv",header=FALSE)
mydata
model = ksvm(mydata[1:10], mydata[,11],type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
model <- ksvm(mydata[,1:10],mydata[,11],type=”C-svc”,kernel=”vanilladot”,C=100,scaled=TRUE)
model = ksvm(mydata[,1:10],mydata[,11],type=”C-svc”,kernel=”vanilladot”,C=100,scaled=TRUE)
model = ksvm(mydata[,1:10],mydata[,11],type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
model = ksvm(as.matrix(mydata[,1:10]), as.factor(mdata[,11]),type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
model = ksvm(as.matrix(mydata[,1:10]), as.factor(mydata[,11]),type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
mydata = as.matrix(read.csv("credit_card_data.csv",header=FALSE))
model = ksvm(mydata[,1:10], mdata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
model
a0 = –model@b
a0 ,- –model@b
a0 <- –model@b
a0 = model@b
a0
#Bryson Cook
#ISYE6501, Spring 2018
#Homework 1
install.packages("kknn")
install.packages("kernlab")
library(kknn)
library(kernlab)
mydata = as.matrix(read.csv("credit_card_data.csv",header=FALSE))
mydata_headers = as.matrix(read.csv("credit_card_data-headers.csv",header=FALSE))
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
# calculate a1…am
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a
# calculate a0
a0 = –model@b
a0
# see what the model predicts
pred = predict(model,data[,1:10])
pred
# see what fraction of the model’s predictions match the actual classification
sum(pred == data[,11]) / nrow(data)
a0 = -model@b
a0
answer =[a, a0]
answer
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
# calculate a1…am
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a
# calculate a0
a0 = -model@b
a0
# see what the model predicts
pred = predict(model,data[,1:10])
pred
# see what fraction of the model’s predictions match the actual classification
sum(pred == data[,11]) / nrow(data)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
# calculate a1…am
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a
# calculate a0
a0 = -model@b
a0
# see what the model predicts
pred = predict(model,mydata[,1:10])
pred
# see what fraction of the model’s predictions match the actual classification
sum(pred == mydata[,11]) / nrow(mydata)
seq(along=100)
seq(100=x)
seq(0,100)
nums = seq(0,100)
nums
list = []
comp = []
comp[,1] = nums
comp = 
fdd
ans = matrix(, nrow = 654, ncol = 2)
ans[,1] = nums
ans
t(nums)
ans[,1] = nums
ans
nums
nums = t(nums)
nums
ans = matrix(, nrow = 101, ncol = 2)
nums = t(nums)
ans[,1] = nums
ans
ans = matrix(, nrow = 101, ncol = 2)
Cvals = seq(1,101)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,2] = accuracy}
ans
ans = matrix(, nrow = 101, ncol = 2)
Cvals = seq(.1,10,.1)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,2] = accuracy}
clear
ans = matrix(, nrow = 101, ncol = 2)
Cvals = seq(.1,10.1,.1)
ans[,1] = t(Cvals)
ans
ans = matrix(, nrow = 101, ncol = 2)
Cvals = seq(.1,10.1,.1)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,2] = accuracy}
ans
clc()
clear()
clear
ans = matrix(, nrow = 101, ncol = 2)
Cvals = seq(1,100)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,2] = accuracy}
ans
ans
Cvals = seq(1,100)
ans[,1] = t(Cvals)
Cvals
t(Cvals)
ans[,1] = t(Cvals)
ans = matrix(, nrow = 100, ncol = 2)
ans[,1] = t(Cvals)
ans
ans = matrix(, nrow = 100, ncol = 2)
Cvals = seq(1,100)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,2] = accuracy}
ans
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.1,scaled=TRUE)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.5,scaled=TRUE)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1,scaled=TRUE)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=5,scaled=TRUE)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=10,scaled=TRUE)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=25,scaled=TRUE)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=50,scaled=TRUE)model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.1,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.5,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=5,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=10,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=25,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=50,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.1,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.5,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=5,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=10,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=25,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=50,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.001,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.005,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=.011,scaled=TRUE)
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
accuracy 
ans = matrix(, nrow = 100, ncol = 2)
Cvals = seq(1,100)
ans[,1] = t(Cvals)
for (x in Cvals){
i = 1
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[i,2] = accuracy
i=i+1}
ans
ans = matrix(, nrow = 100, ncol = 2)
Cvals = seq(1,100)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,2] = accuracy
}
ans
ans = matrix(, nrow = 100, ncol = 2)
Cvals = seq(.1,10,.1)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=x*10
ans[y,2] = accuracy
}
ans
ans = matrix(, nrow = 100, ncol = 2)
Cvals = seq(.01,1,.01)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=x*100
ans[y,2] = accuracy
}
ans
ans = matrix(, nrow = 100, ncol = 4)
Cvals = seq(.01,1,.01)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=x*100
ans[y,2] = accuracy
}
Cvals = seq(1,100,1)
ans[,3] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,4] = accuracy
}
ans
Cvals
#Bryson Cook
#ISYE6501, Spring 2018
#Homework 1
#Part 1a: SVM
install.packages("kknn")
install.packages("kernlab")
library(kknn)
library(kernlab)
mydata = as.matrix(read.csv("credit_card_data.csv",header=FALSE))
#mydata_headers = as.matrix(read.csv("credit_card_data-headers.csv",header=FALSE))
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=100,scaled=TRUE)
# calculate a1…am
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a
# calculate a0
a0 = -model@b
a0
# see what the model predicts
pred = predict(model,mydata[,1:10])
pred
# see what fraction of the model’s predictions match the actual classification
sum(pred == mydata[,11]) / nrow(mydata)
#Part 1b: Vary C values to view accuracy
#C between .01 and 1:
ans = matrix(, nrow = 100, ncol = 4)
Cvals = seq(.01,1,.01)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=x*100
ans[y,2] = accuracy
}
#C between 1 and 100:
Cvals = seq(1,100,1)
ans[,3] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
ans[x,4] = accuracy
}
ans
# Using C between 1 and 100 yeilds the same accuracy, 0.8639144.  This also seems to be the case when 
# using C between .001 and 1.
help (kknn)
length(mydata)
mydata
length(mydata[,1])
x=1
mydata.learn = mydata[,1:10]
mydata.train = mydata[-x,1:10]
mydata.test = mydata[x,1:10]
knn = kknn(formula(mydata), mydata.train, mydata.test, na.action = na.omit(), 
k = 7, distance = 2, kernel = "optimal", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal")) 
x=1
mydata.learn = mydata[,1:10]
mydata.train = mydata[-x,1:10]
mydata.test = mydata[x,1:10]
knn = kknn(mydata, mydata.train, mydata.test, na.action = na.omit(), 
k = 7, distance = 2, kernel = "optimal", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal")) 
seq(1,100000000Cvals = (1*10^-5,1*10^-4,1*10^-3,1*10^-2,1*10^-1,1*10^0,1*10^1,1*10^2,1*10^31*10^4,1*10^5,1*10^6,1*10^7))
Cvals = (1*10^-5,1*10^-4,1*10^-3,1*10^-2,1*10^-1,1*10^0,1*10^1,1*10^2,1*10^31*10^4,1*10^5,1*10^6,1*10^7)
Cvals = [1*10^-5,1*10^-4,1*10^-3,1*10^-2,1*10^-1,1*10^0,1*10^1,1*10^2,1*10^31*10^4,1*10^5,1*10^6,1*10^7]
Cvals = (1*10^-5,1*10^-4,1*10^-3,1*10^-2,1*10^-1,1*10^0,1*10^1,1*10^2,1*10^31*10^4,1*10^5,1*10^6,1*10^7)
Cvals = 1*10^-5
Cvals
Cvals = (1e-5,1e-4,1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7)
ans = matrix(, nrow = 100, ncol = 4)
#Cvals = (1e-5,1e-4,1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7)
Cvals = seq(-10,10)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1ex,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=x*100
ans[y,2] = accuracy
}
ans = matrix(, nrow = 100, ncol = 4)
#Cvals = (1e-5,1e-4,1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7)
Cvals = seq(-10,10)
ans[,1] = t(Cvals)
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1*10^x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=x*100
ans[y,2] = accuracy
}
Cvals = seq(-10,10)
ans[,1] = t(Cvals)
y = 0
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1*10^x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=y+1
ans[y,2] = accuracy
}
ans
Cvals = seq(-10,10)
ans = matrix(, nrow = length(ans), ncol = 2)
ans[,1] = 1*10^t(Cvals)
Cvals = seq(-10,10)
ans = matrix(, nrow = length(ans), ncol = 2)
y = 0
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1*10^x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=y+1
ans[y,1]= 1*10^x
ans[y,2] = accuracy
}
#Prints C values then the accuracy:
ans
clear
ans = matrix(, nrow = length(Cvals), ncol = 2)
ans
Cvals = seq(-10,10)
ans = matrix(, nrow = length(Cvals), ncol = 2)
ans
Cvals = seq(-10,10)
ans = matrix(, nrow = length(Cvals), ncol = 2)
y = 0
for (x in Cvals){
model = ksvm(mydata[,1:10], mydata[,11],type="C-svc", kernel="vanilladot",C=1*10^x,scaled=TRUE)
pred = predict(model,mydata[,1:10])
accuracy = sum(pred == mydata[,11]) / nrow(mydata)
y=y+1
ans[y,1]= 1*10^x
ans[y,2] = accuracy
}
ans
x=1
mydata.learn = mydata[,1:10]
mydata.train = mydata[-x,1:10]
mydata.test = mydata[x,1:10]
knn = kknn(R1~., mydata.train, mydata.test, na.action = na.omit(), 
k = 7, distance = 2, kernel = "optimal", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal")) 
x=1
mydata.learn = data.frame(mydata[,1:10])
mydata.train = data.frame(mydata[-x,1:10])
mydata.test = data.frame(mydata[x,1:10])
knn = kknn(R1~., mydata.train, mydata.test, na.action = na.omit(), 
k = 7, distance = 2, kernel = "optimal", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal")) 
x=1
mydata.learn = data.frame(mydata[,1:10])
mydata.train = data.frame(mydata[-x,1:10])
mydata.test = data.frame(mydata[x,1:10])
knn = kknn(formula = mydata[,11]~., mydata.train, mydata.test, na.action = na.omit(), 
k = 7, distance = 2, kernel = "optimal", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal")) 
mydata.train
mydata.learn
mydata.train
x=1
mydata.learn = data.frame(mydata[,1:10])
mydata.train = data.frame(mydata[-x,1:10])
mydata.test = data.frame(mydata[x,1:10])
knn = kknn(formula = mydata[,11]~., mydata.train, mydata.test, na.action = na.omit(), 
k = 7, distance = 2, kernel = "optimal", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal")) 
knn = kknn(formula = mydata[-x,11]~., mydata.train, mydata.test, na.action = na.omit(), 
k = 7, distance = 2, kernel = "optimal", ykernel = NULL, scale=TRUE,
contrasts = c('unordered' = "contr.dummy", ordered = "contr.ordinal")) 
q()
